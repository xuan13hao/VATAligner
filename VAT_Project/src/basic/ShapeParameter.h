
#ifndef SHAPE_CONFIG_H_
#define SHAPE_CONFIG_H_

#include "Shape.h"

template<typename _val>
class ShapeCodes
{
	public:
	static const char* str[VATConsts::index_modes][VATConsts::max_shapes];
};
// template<> const char* ShapeCodes<Protein>::str[][VATConsts::max_shapes] = 
// {
// 		  { "111110101110110110011101111110010"},{"11110111011111"},{"111101110111111"},{"1111011101111111"}, {"11110111011111111"}
// };
// template<> const char* ShapeCodes<DNA>::str[][VATConsts::max_shapes] = 
// {
// 		 { "111110101110110110011101111110010"},{"11110111011111"},{"111101110111111"},{"1111011101111111"}, {"11110111011111111"}

// };
template<> const char* ShapeCodes<Protein>::str[][VATConsts::max_shapes] = 
{
	// {"11101100101011"}
		{ "1111011111",	"111001101111", "11101100101011","111010100001111","11010010111011"}, 
		{"111011001100101111", "1111001001010001001111", "111100101000010010010111","1111001001010001001111", "111100101000010010010111"}, 		
		{"11101100101011",
 		"1101000100100000100000111",
		"1110001000100000001010011" ,
		"1111001001010001001111", "111100101000010010010111"
}
};
template<> const char* ShapeCodes<DNA>::str[][VATConsts::max_shapes] = 
{

	{ "111111111111111",0,0,0,0},
		 {"111111111111111111", 0, 0,0,0},
		 { 		"11111111111111",
 		"111110101110110110011101111",
 		"11110111011111",
 		"11110111011101101111",
 		"111111111111111111"}

};

// template<> const char* ShapeCodes<Protein>::str[][VATConsts::max_shapes] = {
// 		{ "111101011101111", "111011001100101111", "1111001001010001001111", "111100101000010010010111", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },				// 4x12
// 		{ "1111011111",		// 16x9
// 		"111001101111",
// 		"11101100101011",
// 		"11010010111011",
// 		"111010100001111",
// 		"1110100011001011",
// 		"11100010100101011",
// 		"11011000001100111",
// 		"1101010010000010111",
// 		"11100001000100100111",
// 		"110110000100010001101",
// 		"1110000100001000101011",
// 		"1101010000010001001011",
// 		"1101001001000010000111",
// 		"1101000100100000100000111",
// 		"1110001000100000001010011" }
// };

// template<> const char* ShapeCodes<DNA>::str[][VATConsts::max_shapes] = {
// 		{ "111101011101111", "111011001100101111", "1111001001010001001111", "111100101000010010010111", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },				// 4x12
// 		{ "1111011111",		// 16x9
// 		"111001101111",
// 		"11101100101011",
// 		"11010010111011",
// 		"111010100001111",
// 		"1110100011001011",
// 		"11100010100101011",
// 		"11011000001100111",
// 		"1101010010000010111",
// 		"11100001000100100111",
// 		"110110000100010001101",
// 		"1110000100001000101011",
// 		"1101010000010001001011",
// 		"1101001001000010000111",
// 		"1101000100100000100000111",
// 		"1110001000100000001010011" }
// };

// template<> const char* ShapeCodes<DNA>::str[][VATConsts::max_shapes] = {
// 		// 1x20
// 		{ "111110101110110110011101111", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// 		// 4x16
// 		{ "11110111011101101111", "1110111100001010010011010111", "11110100100010101000100110001111", "11110010011000010000101100010010111", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// 		// 16x18
// 		//{}
// 		// 16x12
// 		//{ "11110111011111", "111010100100101100111", "1011001101001000000011111", "10111001000000110100101011", "111000010011000100010110011", "110100010100100010100001111", "111000100011000001100101011", "101101001100000101010100011", "1110101000001001100001001101", "1110010001000110100010010101", "1100011010001010100000100111", "1110010011000100001001001011", "1101010100100000110001001011", "1110000100100010000110011011", "1101100001010010000101010011", "1101101000010100010010000111" }
// };

class ShapeConfigures
{

public:

	static ShapeConfigures instance;

	ShapeConfigures():
		n_ (0),
		mode_ (0)
	{ 

	}

	template<class _val>
	ShapeConfigures(unsigned mode, const _val&):
		n_ (0),
		mode_ (mode-1)
	{
		unsigned maxShapes = VATParameters::shapes == 0 ? VATConsts::max_shapes : VATParameters::shapes;
		for(unsigned i=0;i<maxShapes;++i)
			if(ShapeCodes<_val>::str[mode_][i])
				shapes_[n_++] = Shape (ShapeCodes<_val>::str[mode_][i], i);
	}

	unsigned count() const
	{ return n_; }

	const Shape& get_shape(unsigned i) const
	{ return shapes_[i]; }

	unsigned mode() const
	{ return mode_; }

	static const ShapeConfigures& get()
	{ return instance; }

private:

	Shape shapes_[VATConsts::max_shapes];
	unsigned n_, mode_;

};

ShapeConfigures ShapeConfigures::instance;

#endif /* SHAPE_CONFIG_H_ */
